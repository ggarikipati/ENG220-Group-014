# -*- coding: utf-8 -*-
"""Welcome To Colab

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/notebooks/intro.ipynb
"""

! pip install streamlit

! pip install plotly

import streamlit as st
import pandas as pd
import plotly.express as px

# Set the title and favicon that appear in the Browser's tab bar.
st.set_page_config(
    page_title='CSV Data Dashboard',
    page_icon=':bar_chart:',  # Emoji for the dashboard
)

# ----------------------------------------------------------------------
# Function to process the uploaded CSV file
@st.cache_data
def process_csv_data(uploaded_file):
    """Process uploaded CSV data."""
    return pd.read_csv(uploaded_file)

# ----------------------------------------------------------------------
# Draw the actual page

# Set the title that appears at the top of the page.
'''
# :bar_chart: CSV Data Dashboard

Upload a CSV file to explore, filter, and visualize data using various chart types. This app allows
you to interact with the data and generate insights through customizable plots.
'''

# File uploader for CSV
uploaded_file = st.file_uploader("Upload your CSV file", type=["csv"])

if uploaded_file is not None:
    # Process the uploaded file
    data = process_csv_data(uploaded_file)

    st.write("### Data Preview")
    st.dataframe(data)

    # Dropdown for selecting columns
    columns = data.columns.tolist()
    x_column = st.selectbox("Select X-axis column", columns)
    y_column = st.selectbox("Select Y-axis column", columns)

    # Dropdown for graph type
    graph_type = st.selectbox(
        "Select Graph Type",
        ["Line", "Bar", "Area", "Pie"]
    )

    # Plot button
    if st.button("Plot Graph"):
        if graph_type == "Line":
            st.line_chart(data[[x_column, y_column]].set_index(x_column))

        elif graph_type == "Bar":
            st.bar_chart(data[[x_column, y_column]].set_index(x_column))

        elif graph_type == "Area":
            st.area_chart(data[[x_column, y_column]].set_index(x_column))

        elif graph_type == "Pie":
            # Pie chart only makes sense for single-column data
            if len(data[x_column].unique()) <= 10:  # Limit to 10 unique categories for readability
                fig = px.pie(
                    data,
                    names=x_column,
                    values=y_column,
                    title=f"{y_column} Distribution ({x_column})"
                )
                st.plotly_chart(fig)
            else:
                st.error("Pie chart requires fewer unique categories in the X-axis.")

    st.write("Tip: Ensure the selected columns are numeric for meaningful plots.")

    # Filtering data for specific values
    st.write("### Filter Data")
    column_to_filter = st.selectbox("Select column to filter", columns)
    unique_values = data[column_to_filter].unique()
    selected_values = st.multiselect(
        "Select values to filter",
        unique_values,
        default=unique_values[:5]  # Select the first 5 values by default
    )

    filtered_data = data[data[column_to_filter].isin(selected_values)]
    st.write("### Filtered Data")
    st.dataframe(filtered_data)
else:
    st.info("Please upload a CSV file to get started.")